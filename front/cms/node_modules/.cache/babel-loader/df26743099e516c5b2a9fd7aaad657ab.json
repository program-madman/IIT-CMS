{"remainingRequest":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/thread-loader/dist/cjs.js!/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/babel-loader/lib/index.js!/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/eslint-loader/index.js??ref--13-0!/Users/liuguanghui/Documents/cms_code/my-message/cms/src/api/getData.js","dependencies":[{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/src/api/getData.js","mtime":1639820327002},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}