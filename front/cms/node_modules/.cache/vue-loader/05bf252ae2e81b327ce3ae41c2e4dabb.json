{"remainingRequest":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuguanghui/Documents/cms_code/my-message/cms/src/views/page/articleDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/src/views/page/articleDetail.vue","mtime":1641464435139},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}