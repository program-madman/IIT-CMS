{"remainingRequest":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuguanghui/Documents/cms_code/my-message/cms/src/components/statisticalReportView.vue?vue&type=template&id=65b80c39&scoped=true&","dependencies":[{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/src/components/statisticalReportView.vue","mtime":1640433935950},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}