{"remainingRequest":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuguanghui/Documents/cms_code/my-message/cms/src/views/page/articleDetail.vue?vue&type=template&id=6c883981&","dependencies":[{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/src/views/page/articleDetail.vue","mtime":1638535920903},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuguanghui/Documents/cms_code/my-message/cms/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}